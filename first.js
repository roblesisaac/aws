module.exports.user = () => {
  return { name: 'Eiken', password: 'pass' };
};

module.exports.site = (user) => {
  return { name: 'plysheet', userId: ((user || {})._id || 'no id'), url: 'plysheet' };  
};

module.exports.sheet = (site) => {
  return {
    name: "sheets",
    link: 'sheets',
    siteId: (site || {})._id || 'no site id',
    public: true,
    sort: 1,
    _init: "",
    templates: [{name: 'main', text: '<h1>here is the main text</h1>'}],
    _schema: [{propName: "name",propType: "string"},{propName: "link",propType: "string"},{propName: "sort",propType: "number"},{propName: "_init",propType: "string"},{propName: "public",propType: "boolean"},{propName: "_schema",propType: "array"},{propName: "templates",propType: "array"},{propName: "users",propType: "array"},{propName: "siteId",propType: "string"},{propName: "js",propType: "string"}],users: [{apps: ["all"],username: "Eiken"}],
    js: "if (!String.prototype.includes) {\n  String.prototype.includes = function() {\n    'use strict';\n    return String.prototype.indexOf.apply(this, arguments) !== -1;\n  };\n}\nif (!String.prototype.excludes) {\n  String.prototype.excludes = function() {\n    'use strict';\n    return String.prototype.indexOf.apply(this, arguments) === -1;\n  };\n}\nfunction addFunctionToArray(name, fn) {\n  Object.defineProperty(Array.prototype, name, {\n    enumerable: false,\n    writable: true,\n    value: fn\n  });  \n}\nfunction itemMatches(item, filter) {\n  var matches = [];\n  for(var key in filter) matches.push(filter[key] === item[key]);\n  return matches.indexOf(false) === -1; \n}\naddFunctionToArray('find', function(filter){\n  var match = [];\n  for (i = 0; i<this.length; i++) {\n    if(itemMatches(this[i], filter)) match.push(this[i]);\n  }\n  return match;  \n});\naddFunctionToArray('findOne', function(filter){\n  var match = {};\n  for (i = 0; i<this.length; i++) {\n    if(itemMatches(this[i], filter)) {\n      match = this[i];\n      i = this.length;\n    }\n  }\n  return match;\n});\n\nply.notify = false;\nply.url = window.location.href;\n\nvar tmplts = {};\nfor(var i in ply.sheets) {\n  for(var t in ply.sheets[i].templates) {\n    tmplts[ply.sheets[i].templates[t].name] = ply.sheets[i].templates[t].text;\n  }\n}\n\nvar api = axios.create({\n  baseURL: 'https://www.blockometry.com/plaza/api/',\n  headers: {\n    token: window.sessionStorage.token,\n    userid: window.sessionStorage.userid,\n    'Pragma': 'no-cache'\n  }\n});\n\nfunction login(user) {\n  axios.post('https://www.blockometry.com/login', {\n    username: user.username,\n    password: user.password\n  }).then(function(res) {\n    window.sessionStorage.token = res.data.token;\n    window.sessionStorage.userid = res.data.userid;\n  });\n}\n\nfunction createComponent(name, obj) {\n  var vue;\n  var tmplt = {};\n  if(obj.templates) {\n    for(var t in obj.templates) tmplt[obj.templates[t].name] = obj.templates[t].text;\n  }\n  obj.template = obj.template || tmplt.main || \"<div>No template yet</div>\";\n  try {\n    if(obj.js && obj.name !== 'sheets') eval(obj.js);\n  } catch(error) {\n    console.log(error);\n  }\n  vue = vue || {};\n  obj.mixins = [plyMixins, vue];\n  Vue.component('ply-'+name, obj);  \n}\n\nvar Sheet = {\n  current: function(){\n    return ply.sheets.findOne({name:ply.link});\n  }\n};\n\nvar plyMixins = {\n  computed: {\n    sheet: Sheet.current,\n    sheetComponent: function() {\n      return 'ply-' + this.sheet.name;\n    }\n  },\n  data: function() {\n    return {\n      ply: ply\n    };\n  }\n};\n\nvar components = {\n  _init: function(){\n    for(var key in this) {\n      if(key.excludes('_')) createComponent(key, this[key]);\n    }\n  },\n  ace: {\n    template: '<div>ace</div>'\n  },\n  form: {\n    computed: {\n      obj: function() {\n        var obj = {};\n        for(var i in this.sheet._schema) {\n          var sch = this.sheet._schema[i];\n          obj[sch.propName] = '';\n        }\n        return obj;\n      }\n    },\n    methods: {\n      save: function() {\n        api.post(this.sheet.link, this.obj).then(function(res){\n          console.log('saved!');\n        });\n      }\n    },\n    template: `\n      <form>\n        <ply-obj :obj=\"obj\" :set=\"{nowrap: true}\"></ply-obj>\n        <a @click=\"save\" class=\"button large\">save</a>  \n      </form>\n    `    \n  },\n  backEnd: {\n    template: `\n    <transition name=\"slide-fade\">\n    <div class=\"grid-x\">\n      <div class=\"cell medium-4 padding\">\n        <ply-form></ply-form>\n      </div>\n      <div class=\"cell medium-8 padding\">\n        <ply-obj v-for=\"(obj, i) in $parent.db\" :obj=\"obj\" :key=\"obj._id\" :set=\"{collapsed: false, field:obj.name, i:i, root:obj, url:sheet.link+'/'+obj._id}\"></ply-obj>\n      </div>\n    </div>\n    </transition>\n    `    \n  },\n  frontEnd: {\n    beforeCreate: function() {\n      createComponent(Sheet.current().name, Sheet.current());\n    },\n    data: function() {\n      return {\n        db: this.$parent.db,\n        show: true\n      };\n    },\n    template: '<transition name=\"slide-fade\"><component v-if=\"show\" :is=\"sheetComponent\"></component></transition>',\n    watch: {\n      'sheet.link': function() {\n        this.show = false;\n        createComponent(Sheet.current().name, Sheet.current());\n        this.show = true;\n      }\n    }    \n  },\n  notify: {\n    created: function() {\n      setTimeout(function(){ ply.notify = false }, 1500);\n    },\n    template: `\n      <transition name=\"slide-fade\">\n        <div id=\"notify\" class=\"bgJet\">{{ ply.notify }}</div>\n      </transition>\n    `\n  },\n  obj: {\n    data: function() {\n        return {\n          open: (this.set || {}).collapsed,\n          settings: this.set || {}\n        };\n      },\n    methods: {\n      _delete: function() {\n        if(this.settings.url) {\n          if(this.sheet.link === 'sheets') return;\n          api.delete(this.settings.url).then(function(res){\n            console.log('deleted!');\n          });\n        }\n      },\n      _save: function() {\n        if(this.settings.url) {\n          var vm = this;\n          api.put(this.settings.url, this.obj).then(function(res){\n            console.log(vm.obj._id + ' saved!');\n            ply.notify = vm.obj._id + ' saved!';\n          });      \n        }\n      },\n      toggle: function() {\n        this.settings.collapsed = !this.settings.collapsed;\n      }\n    },\n    props: ['obj', 'set'],\n    template: `\n      <div class=\"grid-x\">\n        <div v-if=\"!settings.nowrap\" @click=\"_save\" class=\"cell shrink\">\n          <transition name=\"slide-fade\">\n            <a v-if=\"settings.collapsed!==open\" class=\"material-icons bold colorBluePastel arrow\">&#xE313;</a>\n          </transition>\n          <transition name=\"slide-fade\">\n            <a v-if=\"settings.collapsed===open\" class=\"material-icons bold colorBluePastel arrow\">&#xE315;</a>\n          </transition>\n        </div>\n        <div class=\"cell auto\">\n          <div class=\"grid-x\">\n            <a @click=\"toggle\" class=\"colorBlack cell small-12\"><b v-if=\"obj.length\" class=\"colorBlue\">{{ obj.length }}</b> <b v-html=\"settings.field || ''\"></b></a>\n          </div>\n          <div v-if=\"!settings.collapsed\" v-for=\"(value, key) in obj\" class=\"grid-x\">\n            <div class=\"cell small-12\">\n              <ply-obj v-if=\"typeof value === 'object'\" :obj=\"obj[key]\" :set=\"{collapsed:true, field: key.toString()}\"></ply-obj>\n              <ply-objProp v-else :obj=\"obj\" :prop=\"key\"></ply-objProp>    \n            </div>       \n          </div>\n        </div>\n      </div>\n    `\n  },\n  objProp: {\n    data: function() {\n        return {\n          exc: ['_id', '__v', 'userId', 'plyCollapsed', 'plyUrl', 'plyHide', '__proto__']\n        };\n      },\n      methods: {\n        validated: function() {\n          return this.exc.indexOf(this.prop) === -1;\n        }\n      },\n      props: ['obj', 'prop'],\n      template: `\n        <div v-if=\"validated()\" class=\"grid-x\">\n          <div class=\"cell shrink pad5X bold colorGrey\" v-html=\"prop + ': '\"></div>\n          <input v-if=\"obj[prop].length < 20\" type=\"text\" class=\"cell auto dotted minHeightShrink\" v-model=\"obj[prop]\">\n          <textarea v-else v-model=\"obj[prop]\" class=\"cell auto dotted\"></textarea>\n        </div>\n      `    \n  },\n  s: {\n    methods: {\n      parentProps: function(computedStyle, name) {\n        var o = {\n      \t\ttop: parseInt(computedStyle.getPropertyValue(name+\"-top\")),\n      \t\tright: parseInt(computedStyle.getPropertyValue(name+\"-right\")),\n      \t\tbottom: parseInt(computedStyle.getPropertyValue(name+\"-bottom\")),\n      \t\tleft: parseInt(computedStyle.getPropertyValue(name+\"-left\"))\n        };\n        for(var k in o) if(isNaN(o[k])) o[k] = 0;\n        return o;\n      },\n      calculateInnerDimensions: function(computedStyle){\n      \tvar width = parseInt(computedStyle.getPropertyValue(\"width\")),\n      \t    height = parseInt(computedStyle.getPropertyValue(\"height\")),\n      \t    pad = this.parentProps(computedStyle, 'padding'),\n      \t    border = this.parentProps(computedStyle, 'border'),\n      \t    parentBoxSizing = computedStyle.getPropertyValue(\"box-sizing\");\n      \tif(parentBoxSizing == \"border-box\"){\n      \t\twidth = width - (pad.left + pad.right + border.left + border.right);\n      \t\theight = height - (pad.top + pad.top + border.top + border.bottom);\n      \t} \n      \treturn { width: width, height: height };\n      },\n      bigText: function(element) {\n      \tvar style = element.style,\n      \t    computedStyle = window.getComputedStyle(element.parentNode, null),\n      \t    parentStyle = element.parentNode.style;\n      \tstyle.visibility = \"hidden\";\n      \tstyle.display = \"inline-block\";\n      \tstyle.clear = \"both\";\n      \tstyle.fontSize = \"800px\";\n        style.whiteSpace = \"nowrap\";\n      \tvar pad = this.parentProps(computedStyle, 'padding'),\n      \t    parentInnerDimensions = this.calculateInnerDimensions(computedStyle),\n      \t    parentInnerWidth = parentInnerDimensions.width,\n      \t    parentInnerHeight = parentInnerDimensions.height,\n      \t    box = { width: element.offsetWidth, height: element.offsetHeight },\n          \twidthFactor = (parentInnerWidth - pad.left - pad.right) / box.width,\n          \theightFactor = (parentInnerHeight - pad.top - pad.bottom) / box.height,\n          \tlineHeight;\n      \tif (widthFactor < heightFactor)\n      \t\tlineHeight= Math.floor(widthFactor * 1000);\n      \telse if (widthFactor >= heightFactor)\n      \t\tlineHeight= Math.floor(heightFactor * 1000);\n      \tvar fontSize = lineHeight * 0.8;\n        style.fontSize = Math.floor(fontSize) + \"px\";\n        style.fontSize = Math.floor(fontSize) + \"px\";\n      \tstyle.lineHeight = Math.floor(fontSize) + \"px\";\n      \tstyle.visibility = \"visible\";\n      \treturn element;\n      }\n    },\n    mounted: function() {\n      this.bigText(this.$el);\n    },\n    template: '<div><slot></slot></div>'\n  },\n  sheet: {\n    created: function() {\n      this.getDb();\n    },\n    data: function() {\n      return {\n        db: []\n      };\n    },\n    methods: {\n      getDb: function() {\n        var vm = this;\n        vm.db = [];\n        if(this.sheet.link) {\n          api.get(this.sheet.link).then(function(res){\n            vm.db = res.data;\n          });\n        }\n      }\n    },\n    props: ['obj'],\n    template: `\n    <div class=\"grid-x\">\n      <div class=\"cell small-12\">\n        <ply-tools></ply-tools>\n        <component :is=\"sheet._init || 'ply-backEnd'\"></component>\n      </div>\n    </div>\n    `,\n    watch: {\n      'sheet.link': function() {\n        this.getDb();\n      }\n    }\n  },\n  slide: {\n    mounted: function() {\n      $(this.$el).foundation();\n    },\n    props: ['arrows'],\n    template: `\n      <div class=\"orbit\" role=\"region\" aria-label=\"mainSlide\" data-orbit>\n        <div class=\"orbit-wrapper\">\n          <div v-if=\"arrows !== 'false'\" class=\"orbit-controls\">\n            <button class=\"orbit-previous\"><i class=\"material-icons\">&#xE314;</i></button>\n            <button class=\"orbit-next\"><i class=\"material-icons\">&#xE315;</i></button>\n          </div>\n          <ul class=\"orbit-container grid-x align-stretch\">\n            <slot></slot>\n          </ul>\n        </div>\n      </div>\n    `\n  },\n  tools: {\n    template: `\n      <div class=\"grid-x pad10 bgWhite\">\n        <a v-if=\"sheet._init==='ply-frontEnd'\" @click=\"sheet._init='ply-backEnd'\" class=\"cell auto\"><b>Back-end</b></a>\n        <a v-else @click=\"sheet._init='ply-frontEnd'\" class=\"cell auto\"><b>Front-end</b></a>\n        <a @click=\"sheet._init='ply-ace'\" class=\"cell auto\">Ace</a>\n      </div>  \n    `\n  },\n  topBar: {\n    template: `\n    <div class=\"grid-x align-middle\">\n      <a v-html=\"ply.site.name\" :href=\"ply.url\" class=\"cell shrink button large\" ></a>\n      <div class=\"cell auto\">\n        <div class=\"grid-x\">\n          <a v-for=\"sheet in ply.sheets\" @click=\"ply.link=sheet.link\" class=\"cell auto button large\">{{ sheet.link }}</a>        \n        </div>\n      </div>\n    </div>\n    `\n  }\n};\n\ncomponents._init();\n\nvar site = new Vue({\n  data: {\n    ply: ply\n  },\n  el: '#app',\n  template: `\n    <div class=\"grid-x\">\n      <div class=\"cell small-12\">\n        <ply-notify v-if=\"ply.notify\"></ply-notify>\n        <ply-topBar></ply-topBar>\n        <ply-sheet></ply-sheet>\n      </div>\n    </div>\n  `\n});\n"
    }; 
};
